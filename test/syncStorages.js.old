import test from "ava"
import Sinon from "sinon"

import uuidHash from "uuid-by-string"

import { StorageMember } from "../src/index.js"
import syncRootEvent from "../src/events/syncRootEvent.js"
import syncBranchEvent from "../src/events/syncBranchEvent.js"
import readyEvent from "../src/events/readyStorageEvent.js"
import upsertEvent from "../src/events/upsertItemEvent.js"
import { MemberFactory } from "@ellementul/uee-core"

function testSubEvent(storage, event) {
    const callback = Sinon.fake()
    storage.subscribe(event, callback, "test")

    return callback
}

test.only("add item", t => {
    const storageType = "testStorage"

    const room = new MemberFactory
    room.makeRoom()

    const firstStorage = new StorageMember(storageType, true)
    const secondStorage = new StorageMember(storageType, true)

    const syncRootCallback = testSubEvent(room, syncRootEvent)
    const syncBranchCallback = testSubEvent(room, syncBranchEvent)
    const upsertCallback = testSubEvent(room, upsertEvent)

    room.addMember(firstStorage)
    room.addMember(secondStorage)

    room.send(upsertEvent, { storageType, item: { uuid: uuidHash("uuid"), hash: uuidHash("HelloWorld!"), data: "HelloWorld!" } })
    // t.is(syncRootCallback.callCount, 2)
    // t.is(syncBranchCallback.callCount, 2)

    // console.log(syncRootCallback.args)
    console.log(syncBranchCallback.callCount)
    console.log(upsertCallback.callCount)

    t.pass()
})

// test.beforeEach('init members', t => {
//     const storageType = "testStorage"

//     const room = new MemberFactory
//     const firstStorage = new StorageMember(storageType, true)
//     const secondStorage = new StorageMember(storageType, true)
//     const otherStorage = new StorageMember("otherStorage", true)

//     room.makeRoom()
//     const readyCallback = testSubEvent(room, readyEvent)
    
//     room.addMember(firstStorage)
//     room.addMember(secondStorage)
//     room.addMember(otherStorage)

//     t.is(readyCallback.callCount, 4)

//     t.context = {
//         storageType,
//         room,
//         firstStorage,
//         secondStorage,
//         otherStorage,
//         readyCallback
//     }
// })

// test.only("add item", t => {
//     const { storageType, room } = t.context

//     const syncRootCallback = testSubEvent(room, syncRootEvent)
//     const syncBranchCallback = testSubEvent(room, syncBranchEvent)

//     room.send(upsertEvent, { storageType, item: { uuid: uuidHash("uuid"), hash: uuidHash("HelloWorld!"), data: "HelloWorld!" } })
//     console.log(syncRootCallback.args)
//     console.log(syncBranchCallback.args)

//     t.is(syncRootCallback.callCount, 5) 
// })

// test("resync via random root hash", t => {
//     const { storageType, room } = t.context

//     const syncBranchCallback = testSubEvent(room, syncBranchEvent)

//     room.send(syncRootEvent, { storageType, isUpdated: true })

//     t.is(syncBranchCallback.callCount, 2) 
// })

// test.skip("load new storage", t => {
//     const { storageType, room } = t.context

//     room.send(upsertEvent, { storageType: "testStorage" })

//     const thirdStorage = new StorageMember(storageType, true)

//     const upsertCallback = testSubEvent(room, upsertEvent)
//     const syncRootCallback = testSubEvent(room, syncRootEvent)
//     const syncBranchCallback = testSubEvent(room, syncBranchEvent)
//     const readyCallback = testSubEvent(room, readyEvent)

//     room.addMember(thirdStorage)
    

//     t.is(syncBranchCallback.callCount, 2)
// })